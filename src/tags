!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
(.types)	Postgres/Data/PostgresType.idr	/^(.types) : TypeDictionary -> List (Oid, PType)$/;"	d
(>>)	Postgres/DB.idr	/^(>>) : (db : Database a s1 (const s2)) -> Database b s2 s3Fn -> Database b s1 s3Fn$/;"	d
(>>=)	Postgres/DB.idr	/^(>>=) : (db : Database a s1 s2Fn) -> (f : (x : a) -> Database b (s2Fn x) s3Fn) -> Database b s1 s3Fn$/;"	d
(processValue	Postgres/Query.idr	/^  [| (processValue castable x) :: (processCols castables xs) |]$/;"	c
AUTH_OK	Postgres/Data/ConnectionStatus.idr	/^                      | AUTH_OK$/;"	c
AWAITING_RESPONSE	Postgres/Data/ConnectionStatus.idr	/^                      | AWAITING_RESPONSE$/;"	c
BAD	Postgres/Data/ConnectionStatus.idr	/^                      | BAD$/;"	c
BAD_RESPONSE	Postgres/Data/ResultStatus.idr	/^                  | BAD_RESPONSE$/;"	c
Binary	Postgres/Data/PostgresType.idr	/^data FormatCode = Text | Binary$/;"	c
Bind	Postgres/DB.idr	/^  Bind    : (db : Database a s1 s2Fn) -> (f : (x : a) -> Database b (s2Fn x) s3Fn) -> Database b s1 s3Fn$/;"	d
CConnected	Postgres/DB.idr	/^  CConnected : (conn : Connection) -> ConnectionState Open$/;"	d
CDisconnected	Postgres/DB.idr	/^  CDisconnected : ConnectionState Closed$/;"	d
COMMAND_OK	Postgres/Data/ResultStatus.idr	/^                  | COMMAND_OK$/;"	c
COPY_BOTH	Postgres/Data/ResultStatus.idr	/^                  | COPY_BOTH$/;"	c
COPY_IN	Postgres/Data/ResultStatus.idr	/^                  | COPY_IN$/;"	c
COPY_OUT	Postgres/Data/ResultStatus.idr	/^                  | COPY_OUT$/;"	c
Cast	Postgres/Data/PostgresValue.idr	/^  Cast      : HasDefaultType ty => Castable ty$/;"	d
CastMaybe	Postgres/Data/PostgresValue.idr	/^  CastMaybe : HasDefaultType ty => Castable (Maybe ty)$/;"	d
Castable	Postgres/Data/PostgresValue.idr	/^data Castable : Type -> Type where$/;"	t
Closed	Postgres/DB.idr	/^data DBState = Open | Closed$/;"	c
Conn	Postgres/Data/Conn.idr	/^data Conn : Type where$/;"	t
Connection	Postgres/DB.idr	/^data Connection : Type where$/;"	t
ConnectionState	Postgres/DB.idr	/^data ConnectionState : DBState -> Type where$/;"	t
ConnectionStatus	Postgres/Data/ConnectionStatus.idr	/^data ConnectionStatus = OK$/;"	t
DBClose	Postgres/DB.idr	/^  DBClose : Database () Open (const Closed)$/;"	d
DBOpen	Postgres/DB.idr	/^  DBOpen  : (url : String) -> Database OpenResult Closed OpenResultState$/;"	d
DBState	Postgres/DB.idr	/^data DBState = Open | Closed$/;"	t
DBoolean	Postgres/Data/PostgresValue.idr	/^  DBoolean  : SafeCast (PValue PBoolean) Bool    => HasDefaultType Bool$/;"	d
DChar	Postgres/Data/PostgresValue.idr	/^  DChar     : SafeCast (PValue PChar)    Char    => HasDefaultType Char$/;"	d
DDouble	Postgres/Data/PostgresValue.idr	/^  DDouble   : SafeCast (PValue PDouble)  Double  => HasDefaultType Double$/;"	d
DIO	Postgres/DB.idr	/^  DIO      : IO a -> Database a s1 (const s1)$/;"	d
DInteger	Postgres/Data/PostgresValue.idr	/^  DInteger  : SafeCast (PValue PInteger) Integer => HasDefaultType Integer $/;"	d
DJson	Postgres/Data/PostgresValue.idr	/^  DJson     : SafeCast (PValue PJson)    JSON    => HasDefaultType JSON$/;"	d
DList	Postgres/Data/PostgresValue.idr	/^  DList     : HasDefaultType to => HasDefaultType (List to)$/;"	d
DString	Postgres/Data/PostgresValue.idr	/^  DString   : SafeCast (PValue PString)  String  => HasDefaultType String$/;"	d
Database	Postgres/DB.idr	/^data Database : (ty : Type) -> (s1 : DBState) -> (s2Fn : (ty -> DBState)) -> Type where$/;"	t
EMPTY_QUERY	Postgres/Data/ResultStatus.idr	/^data ResultStatus = EMPTY_QUERY$/;"	c
Exec	Postgres/DB.idr	/^  Exec    : (fn : Connection -> IO a) -> Database a Open (const Open)$/;"	d
ExecSource	Postgres/Exec.idr	/^data ExecSource : Type where$/;"	t
FATAL_ERROR	Postgres/Data/ResultStatus.idr	/^                  | FATAL_ERROR$/;"	c
Failed	Postgres/DB.idr	/^data OpenResult = OK | Failed String$/;"	c
FormatCode	Postgres/Data/PostgresType.idr	/^data FormatCode = Text | Binary$/;"	t
GetTypes	Postgres/DB.idr	/^  GetTypes : Database TypeDictionary Open (const Open)$/;"	d
HasDefaultType	Postgres/Data/PostgresValue.idr	/^data HasDefaultType : Type -> Type where$/;"	t
MADE	Postgres/Data/ConnectionStatus.idr	/^                      | MADE$/;"	c
MkColType	Postgres/Data/PostgresType.idr	/^  MkColType : (nullable: Bool) -> (pt : PType) -> PColType pt$/;"	d
MkConn	Postgres/Data/Conn.idr	/^  MkConn : Ptr PGconn -> Conn$/;"	d
MkConnection	Postgres/DB.idr	/^  MkConnection : Conn -> TypeDictionary -> Connection$/;"	d
MkExecSource	Postgres/Exec.idr	/^  MkExecSource : Conn -> ExecSource$/;"	d
MkOid	Postgres/Data/PostgresType.idr	/^  MkOid : Int -> Oid$/;"	d
MkResult	Postgres/Result.idr	/^  MkResult : Ptr PGresult -> Result$/;"	d
MkTupleResult	Postgres/Result.idr	/^  MkTupleResult : (res : Result) -> TupleResult (resultRowCount res) (resultColCount res)$/;"	d
MkTypeDictionary	Postgres/Data/PostgresType.idr	/^  MkTypeDictionary : List (Oid, PType) -> TypeDictionary$/;"	d
NEEDED	Postgres/Data/ConnectionStatus.idr	/^                      | NEEDED$/;"	c
NONFATAL_ERROR	Postgres/Data/ResultStatus.idr	/^                  | NONFATAL_ERROR$/;"	c
OK	Postgres/DB.idr	/^data OpenResult = OK | Failed String$/;"	c
OK	Postgres/Data/ConnectionStatus.idr	/^data ConnectionStatus = OK$/;"	c
OTHER	Postgres/Data/ConnectionStatus.idr	/^                      | OTHER Int$/;"	c
OTHER	Postgres/Data/ResultStatus.idr	/^                  | OTHER Int$/;"	c
Oid	Postgres/Data/PostgresType.idr	/^data Oid : Type where$/;"	t
Open	Postgres/DB.idr	/^data DBState = Open | Closed$/;"	c
OpenResult	Postgres/DB.idr	/^data OpenResult = OK | Failed String$/;"	t
OpenResultState	Postgres/DB.idr	/^OpenResultState : OpenResult -> DBState$/;"	d
PArray	Postgres/Data/PostgresType.idr	/^           | PArray PType$/;"	c
PBoolean	Postgres/Data/PostgresType.idr	/^           | PBoolean$/;"	c
PChar	Postgres/Data/PostgresType.idr	/^           | PChar$/;"	c
PColType	Postgres/Data/PostgresType.idr	/^data PColType : PType -> Type where$/;"	t
PDate	Postgres/Data/PostgresType.idr	/^           | PDate$/;"	c
PDatetime	Postgres/Data/PostgresType.idr	/^           | PDatetime$/;"	c
PDouble	Postgres/Data/PostgresType.idr	/^           | PDouble$/;"	c
PGconn	Postgres/Data/Conn.idr	/^data PGconn : Type$/;"	t
PGnotify	Postgres/Notification.idr	/^PGnotify : Type$/;"	d
PGresult	Postgres/Result.idr	/^data PGresult : Type$/;"	t
PInteger	Postgres/Data/PostgresType.idr	/^data PType = PInteger$/;"	c
PJson	Postgres/Data/PostgresType.idr	/^           | PJson$/;"	c
POid	Postgres/Data/PostgresType.idr	/^           | POid$/;"	c
POther	Postgres/Data/PostgresType.idr	/^           | POther String$/;"	c
PString	Postgres/Data/PostgresType.idr	/^           | PString$/;"	c
PTime	Postgres/Data/PostgresType.idr	/^           | PTime$/;"	c
PType	Postgres/Data/PostgresType.idr	/^data PType = PInteger$/;"	t
PUnknown	Postgres/Data/PostgresType.idr	/^           | PUnknown Oid$/;"	c
PUuid	Postgres/Data/PostgresType.idr	/^           | PUuid$/;"	c
PValue	Postgres/Data/PostgresValue.idr	/^data PValue : (pType : PType) -> Type where$/;"	t
Pure	Postgres/DB.idr	/^  Pure    : (x : a) -> Database a (stateFn x) stateFn$/;"	d
Raw	Postgres/Data/PostgresValue.idr	/^  Raw : (rawString : String) -> PValue pType$/;"	d
Result	Postgres/Result.idr	/^data Result : Type where$/;"	t
ResultStatus	Postgres/Data/ResultStatus.idr	/^data ResultStatus = EMPTY_QUERY$/;"	t
SETENV	Postgres/Data/ConnectionStatus.idr	/^                      | SETENV$/;"	c
SINGLE_TUPLE	Postgres/Data/ResultStatus.idr	/^                  | SINGLE_TUPLE$/;"	c
SSL_STARTUP	Postgres/Data/ConnectionStatus.idr	/^                      | SSL_STARTUP$/;"	c
STARTED	Postgres/Data/ConnectionStatus.idr	/^                      | STARTED$/;"	c
StringResultset	Postgres/Result.idr	/^StringResultset : (header : Bool) -> Type$/;"	d
TUPLES_OK	Postgres/Data/ResultStatus.idr	/^                  | TUPLES_OK$/;"	c
Text	Postgres/Data/PostgresType.idr	/^data FormatCode = Text | Binary$/;"	c
TupleResult	Postgres/Result.idr	/^data TupleResult : (rows: Nat) -> (cols: Nat) -> Type where$/;"	t
TypeDictionary	Postgres/Data/PostgresType.idr	/^data TypeDictionary : Type where$/;"	t
arrayOrNot	Postgres/LoadTypes.idr	/^arrayOrNot : (isArray : Bool) -> PType -> PType$/;"	d
asDefaultType	Postgres/Data/PostgresValue.idr	/^asDefaultType : Castable t -> (columnValue : Maybe String) -> Either String t$/;"	d
booleanTypeStrings	Postgres/LoadTypes.idr	/^booleanTypeStrings : List String$/;"	d
channel	Postgres/Notification.idr	/^  channel : String$/;"	d
charTypeStrings	Postgres/LoadTypes.idr	/^charTypeStrings : List String$/;"	d
closeDatabase	Postgres/DB.idr	/^closeDatabase : Database () Open (const Closed)$/;"	d
columnMismatchError	Postgres/Query.idr	/^      columnMismatchError : (received : Nat) -> String$/;"	d
connectionStatus	Postgres/DB/Core.idr	/^connectionStatus: Int -> ConnectionStatus$/;"	d
cycle	Postgres/Notification.idr	/^cycle : Conn -> IO Notification$/;"	d
dateTypeStrings	Postgres/LoadTypes.idr	/^dateTypeStrings : List String$/;"	d
datetimeTypeStrings	Postgres/LoadTypes.idr	/^datetimeTypeStrings : List String$/;"	d
dbCommands	Postgres/DB.idr	/^    dbCommands : Database (Either String a) Closed (const Closed)$/;"	d
debugDumpTypes	Postgres/DB.idr	/^debugDumpTypes : Database () Open (const Open)$/;"	d
doubleTypeStrings	Postgres/LoadTypes.idr	/^doubleTypeStrings : List String$/;"	d
empty	Postgres/Data/PostgresType.idr	/^empty : TypeDictionary$/;"	d
evalDatabase	Postgres/DB.idr	/^evalDatabase : HasIO io => Database a Closed (const Closed) -> io a$/;"	d
exec	Postgres/DB.idr	/^exec : (Connection -> IO a) -> Database a Open (const Open)$/;"	d
exec	Postgres/Result.idr	/^  exec : source -> input -> IO (Ptr PGresult)$/;"	d
expectedQuery	Postgres/DB.idr	/^expectedQuery : {cols : Nat} $/;"	d
getConn	Postgres/DB.idr	/^getConn : Connection -> Conn$/;"	d
getTypes	Postgres/DB.idr	/^getTypes : Connection -> TypeDictionary$/;"	d
headerNames	Postgres/Query.idr	/^headerNames : {cols : Nat} -> TupleResult rows cols -> Vect cols String$/;"	d
headerTypes	Postgres/Query.idr	/^headerTypes : {auto types : TypeDictionary} $/;"	d
headers	Postgres/Query.idr	/^headers : {auto types : TypeDictionary} $/;"	d
helper	Postgres/Utility.idr	/^helper : String -> String$/;"	d
ignore	Postgres/Exec.idr	/^ignore : Result -> IO ()$/;"	d
initDatabase	Postgres/DB.idr	/^initDatabase : Database () Closed (const Closed)$/;"	d
intToFormatCode	Postgres/Result.idr	/^intToFormatCode : Int -> FormatCode$/;"	d
integerTypeStrings	Postgres/LoadTypes.idr	/^integerTypeStrings : List String$/;"	d
isNullNotification	Postgres/Notification.idr	/^isNullNotification : Ptr PGnotify -> Bool$/;"	d
json	Postgres/Query.idr	/^ toJson r = pure $ [ json | json <- parse !(maybeFirstRowCol !(tupleResult r)) ]$/;"	c
jsonQuery	Postgres/DB.idr	/^jsonQuery : (query : String) -> Connection -> IO (Maybe JSON)$/;"	d
jsonTypeStrings	Postgres/LoadTypes.idr	/^jsonTypeStrings : List String$/;"	d
libpq	Postgres/Utility.idr	/^libpq : String -> String$/;"	d
liftIO'	Postgres/DB.idr	/^liftIO' : IO a -> Database a s1 (const s1)$/;"	d
listen	Postgres/DB.idr	/^listen : (channel : String) -> Connection -> IO ResultStatus$/;"	d
lookup	Postgres/Data/PostgresType.idr	/^lookup : Oid -> TypeDictionary -> PType$/;"	d
maybeFirstRowCol	Postgres/Query.idr	/^maybeFirstRowCol : {r,c : Nat} -> TupleResult r c -> Maybe String$/;"	d
name	Postgres/Result.idr	/^  name : String$/;"	d
next	Postgres/Notification.idr	/^  next : IO Notification$/;"	d
nextNotification	Postgres/DB.idr	/^nextNotification : Connection -> IO (Maybe Notification)$/;"	d
notNothing	Postgres/Data/PostgresValue.idr	/^notNothing : (context : String) -> Maybe String -> Either String String$/;"	d
notification	Postgres/Notification.idr	/^notification : PGnotify -> Notification$/;"	d
notificationChannel	Postgres/Notification.idr	/^notificationChannel : PGnotify -> String$/;"	d
notificationPayload	Postgres/Notification.idr	/^notificationPayload : PGnotify -> String$/;"	d
notificationStream	Postgres/DB.idr	/^notificationStream : Connection -> Stream (IO Notification)$/;"	d
notificationStruct	Postgres/Notification.idr	/^notificationStruct : HasIO io => Ptr PGnotify -> io PGnotify$/;"	d
nullable	Postgres/Data/PostgresType.idr	/^nullable : PColType t -> Bool$/;"	d
nullableResultRow	Postgres/Result.idr	/^nullableResultRow : {cols: Nat} -> (res : TupleResult rows cols) -> (row: Fin rows) -> (Vect cols (Lazy (Maybe String)))$/;"	d
o	Postgres/LoadTypes.idr	/^typeResult [oid, type] = [(o, parseType t) | o <- parseOid oid, t <- (maybeToEither "Found null when looking for type" type)]$/;"	c
oidToInt	Postgres/Data/PostgresType.idr	/^oidToInt : Oid -> Int$/;"	d
oidTypeStrings	Postgres/LoadTypes.idr	/^oidTypeStrings : List String$/;"	d
openDatabase	Postgres/DB.idr	/^openDatabase : (url : String) -> Database OpenResult Closed OpenResultState$/;"	d
openResult	Postgres/DB.idr	/^openResult : Conn -> OpenResult$/;"	d
pType	Postgres/Data/PostgresType.idr	/^pType : PColType t -> PType$/;"	d
parse	Postgres/Data/PostgresValue.idr	/^parse : (pType ** SafeCast (PValue pType) to)$/;"	d
parseArray	Postgres/Data/PostgresValue.idr	/^parseArray : String -> Maybe (List String)$/;"	d
parseNullable	Postgres/Data/PostgresValue.idr	/^parseNullable : (pType ** SafeCast (PValue pType) to)$/;"	d
parseOid	Postgres/LoadTypes.idr	/^parseOid : Maybe String -> Either String Oid$/;"	d
parseType	Postgres/LoadTypes.idr	/^parseType : String -> PType$/;"	d
payload	Postgres/Notification.idr	/^  payload : String$/;"	d
perform	Postgres/DB.idr	/^perform : (command : String) -> Connection -> IO ResultStatus$/;"	d
pgClose	Postgres/DB/Core.idr	/^pgClose : HasIO io => Conn -> io ()$/;"	d
pgErrorMessage	Postgres/DB/Core.idr	/^pgErrorMessage : HasIO io => Conn -> io String$/;"	d
pgExec	Postgres/DB.idr	/^pgExec : (Conn -> IO a) -> Connection -> IO a$/;"	d
pgExec	Postgres/Exec.idr	/^     pgExec : Conn -> (command: String) -> IO (Ptr PGresult)$/;"	d
pgJSONResultQuery	Postgres/Query.idr	/^pgJSONResultQuery : (query: String) -> Conn -> IO (Maybe JSON)$/;"	d
pgListen	Postgres/Notification.idr	/^pgListen : (channel: String) -> Conn -> IO ResultStatus$/;"	d
pgLoadTypes	Postgres/LoadTypes.idr	/^pgLoadTypes : HasIO io => Conn -> io (Either String TypeDictionary)$/;"	d
pgNextNotification	Postgres/Notification.idr	/^pgNextNotification : Conn -> IO (Maybe Notification)$/;"	d
pgNotificationStream	Postgres/Notification.idr	/^pgNotificationStream : Conn -> Stream (IO Notification)$/;"	d
pgNullableStringResultset	Postgres/Result.idr	/^pgNullableStringResultset : {rows: Nat} $/;"	d
pgOpen	Postgres/DB/Core.idr	/^pgOpen : HasIO io => (pgUrl: String) -> io Conn$/;"	d
pgResultErrorMessage	Postgres/Result.idr	/^pgResultErrorMessage : Result -> Maybe String$/;"	d
pgResultNullableStringValue	Postgres/Result.idr	/^pgResultNullableStringValue : (res: TupleResult rows cols) -> (row: Fin rows) -> (col: Fin cols) -> Maybe String$/;"	d
pgResultQuery	Postgres/Query.idr	/^pgResultQuery : {auto types : TypeDictionary} $/;"	d
pgResultSize	Postgres/Result.idr	/^pgResultSize : {r: Nat} -> {c: Nat} -> TupleResult r c -> (Nat, Nat)$/;"	d
pgResultStatus	Postgres/Result.idr	/^pgResultStatus : Result -> ResultStatus$/;"	d
pgResultStringValue	Postgres/Result.idr	/^pgResultStringValue : (res: TupleResult rows cols) -> (row: Fin rows) -> (col: Fin cols) -> String$/;"	d
pgResultSuccess	Postgres/Result.idr	/^pgResultSuccess : Result -> Bool$/;"	d
pgResultsetColNames	Postgres/Result.idr	/^pgResultsetColNames : {cols : Nat} -> (res : TupleResult rows cols) -> Vect cols String$/;"	d
pgResultsetColTypes	Postgres/Result.idr	/^pgResultsetColTypes : {auto types : TypeDictionary} -> {cols : Nat} -> (res : TupleResult rows cols) -> Vect cols PType$/;"	d
pgStatus	Postgres/DB/Core.idr	/^pgStatus : Conn -> ConnectionStatus$/;"	d
pgStringResultsQuery	Postgres/Query.idr	/^pgStringResultsQuery : {auto types : TypeDictionary} $/;"	d
pgStringResultset	Postgres/Result.idr	/^pgStringResultset : {rows: Nat} $/;"	d
pgWait	Postgres/DB/Wait.idr	/^pgWait : Conn -> IO Bool$/;"	d
prim__dbClearResult	Postgres/Result.idr	/^prim__dbClearResult : Ptr PGresult -> PrimIO ()$/;"	d
prim__dbClose	Postgres/DB/Core.idr	/^prim__dbClose : Ptr PGconn -> PrimIO ()$/;"	d
prim__dbConsumeInput	Postgres/DB/Core.idr	/^prim__dbConsumeInput : Ptr PGconn -> PrimIO Int$/;"	d
prim__dbErrorMessage	Postgres/DB/Core.idr	/^prim__dbErrorMessage : Ptr PGconn -> PrimIO String$/;"	d
prim__dbExec	Postgres/Exec.idr	/^prim__dbExec : Ptr PGconn -> (command: String) -> PrimIO (Ptr PGresult)$/;"	d
prim__dbFreeNotifyStruct	Postgres/Notification.idr	/^prim__dbFreeNotifyStruct : Ptr PGnotify -> PrimIO ()$/;"	d
prim__dbGetNextNotification	Postgres/Notification.idr	/^prim__dbGetNextNotification : Ptr PGconn -> PrimIO (Ptr PGnotify)$/;"	d
prim__dbNotifyStruct	Postgres/Notification.idr	/^prim__dbNotifyStruct : Ptr PGnotify -> PGnotify$/;"	d
prim__dbOpen	Postgres/DB/Core.idr	/^prim__dbOpen : String -> PrimIO (Ptr PGconn)$/;"	d
prim__dbResultColCount	Postgres/Result.idr	/^prim__dbResultColCount : Ptr PGresult -> Int$/;"	d
prim__dbResultColFormatCode	Postgres/Result.idr	/^prim__dbResultColFormatCode : Ptr PGresult -> (col : Int) -> Int$/;"	d
prim__dbResultColName	Postgres/Result.idr	/^prim__dbResultColName : Ptr PGresult -> (col : Int) -> String$/;"	d
prim__dbResultColType	Postgres/Result.idr	/^prim__dbResultColType : Ptr PGresult -> (col : Int) -> Int$/;"	d
prim__dbResultErrorMessage	Postgres/Result.idr	/^prim__dbResultErrorMessage : Ptr PGresult -> String$/;"	d
prim__dbResultRowCount	Postgres/Result.idr	/^prim__dbResultRowCount : Ptr PGresult -> Int$/;"	d
prim__dbResultStatus	Postgres/Result.idr	/^prim__dbResultStatus : Ptr PGresult -> Int$/;"	d
prim__dbResultValue	Postgres/Result.idr	/^prim__dbResultValue : Ptr PGresult -> (row: Int) -> (col: Int) -> String$/;"	d
prim__dbResultValueIsNull	Postgres/Result.idr	/^prim__dbResultValueIsNull : Ptr PGresult -> (row : Int) -> (col : Int) -> Int$/;"	d
prim__dbStatus	Postgres/DB/Core.idr	/^prim__dbStatus : Ptr PGconn -> Int$/;"	d
prim__dbWait	Postgres/DB/Wait.idr	/^prim__dbWait : Ptr PGconn -> PrimIO Int$/;"	d
prim__isNullNotifyStruct	Postgres/Notification.idr	/^prim__isNullNotifyStruct : Ptr PGnotify -> Int$/;"	d
prim__string_value	Postgres/Utility.idr	/^prim__string_value : Ptr String -> String$/;"	d
processCols	Postgres/Query.idr	/^processCols : {0 expected : Vect cols Type}$/;"	d
processRows	Postgres/Query.idr	/^processRows : {0 expected : Vect cols Type} $/;"	d
processValue	Postgres/Query.idr	/^processValue : Castable expected$/;"	d
pure	Postgres/DB.idr	/^pure : (x : a) -> Database a (stateFn x) stateFn$/;"	d
queryTypes	Postgres/LoadTypes.idr	/^    queryTypes : String$/;"	d
quote	Postgres/LoadTypes.idr	/^quote : String -> String$/;"	d
rawString	Postgres/Data/PostgresValue.idr	/^rawString : PValue t -> String$/;"	d
resultColCount	Postgres/Result.idr	/^resultColCount : Result -> Nat$/;"	d
resultColFormatCode	Postgres/Result.idr	/^resultColFormatCode : TupleResult r c -> (col : Fin c) -> FormatCode$/;"	d
resultColName	Postgres/Result.idr	/^resultColName : TupleResult r c -> (col : Fin c) -> String$/;"	d
resultColType	Postgres/Result.idr	/^resultColType : {auto types : TypeDictionary} -> TupleResult r c -> (col : Fin c) -> PType$/;"	d
resultRow	Postgres/Result.idr	/^resultRow : {cols: Nat} -> (res : TupleResult rows cols) -> (row: Fin rows) -> (Vect cols (Lazy String))$/;"	d
resultRowCount	Postgres/Result.idr	/^resultRowCount : Result -> Nat$/;"	d
resultStatus	Postgres/Result.idr	/^resultStatus : Int -> ResultStatus$/;"	d
resultValueIsNull	Postgres/Result.idr	/^resultValueIsNull : TupleResult r c -> (row : Fin r) -> (col : Fin c) -> Bool$/;"	d
rows	Postgres/Query.idr	/^rows : {rows, cols : Nat} -> TupleResult rows cols -> Vect rows (Vect cols (Maybe String))$/;"	d
runDatabase'	Postgres/DB.idr	/^runDatabase' : HasIO io => ConnectionState s1 -> Database a s1 s2Fn -> io $ (x : a ** ConnectionState (s2Fn x))$/;"	d
safeCast	Postgres/Data/PostgresValue.idr	/^  safeCast : ty1 -> Maybe ty2$/;"	d
safeCastImpl	Postgres/Data/PostgresValue.idr	/^safeCastImpl : HasDefaultType to -> (pType ** SafeCast (PValue pType) to)$/;"	d
showTuple	Postgres/Data/PostgresType.idr	/^      showTuple : (Oid, PType) -> String$/;"	d
stringQuery	Postgres/DB.idr	/^stringQuery : (header : Bool) -> (query : String) -> Connection -> IO (Either String (StringResultset header))$/;"	d
stringResults	Postgres/Query.idr	/^    stringResults : Result -> IO (Either String (StringResultset header))$/;"	d
stringTypeStrings	Postgres/LoadTypes.idr	/^stringTypeStrings : List String$/;"	d
supportedTypes	Postgres/LoadTypes.idr	/^    supportedTypes : List String$/;"	d
timeTypeStrings	Postgres/LoadTypes.idr	/^timeTypeStrings : List String$/;"	d
toJson	Postgres/Query.idr	/^ toJson : Result -> IO (Maybe JSON)$/;"	d
tupleResult	Postgres/Result.idr	/^tupleResult : (res: Result) -> Maybe (TupleResult (resultRowCount res) (resultColCount res))$/;"	d
type	Postgres/Result.idr	/^  type : PType$/;"	d
typeDictionary	Postgres/Data/PostgresType.idr	/^typeDictionary : List (Oid, PType) -> TypeDictionary$/;"	d
typeQuery	Postgres/LoadTypes.idr	/^typeQuery : String$/;"	d
typeResult	Postgres/LoadTypes.idr	/^typeResult : Vect 2 (Maybe String) -> Either String (Oid, PType)$/;"	d
typeSearch	Postgres/LoadTypes.idr	/^    typeSearch : Vect ? Bool$/;"	d
typeSpec	Postgres/LoadTypes.idr	/^    typeSpec : (Bool, String)$/;"	d
types	Postgres/Data/PostgresType.idr	/^types : TypeDictionary -> List (Oid, PType)$/;"	d
unsafeExec	Postgres/DB.idr	/^unsafeExec : (Conn -> IO a) -> Database a Open (const Open)$/;"	d
uuidTypeStrings	Postgres/LoadTypes.idr	/^uuidTypeStrings : List String$/;"	d
valueAt	Postgres/Result.idr	/^  valueAt : Fin cols -> Lazy (Maybe String)$/;"	d
valueAt	Postgres/Result.idr	/^  valueAt : Fin cols -> Lazy String$/;"	d
valueAt	Postgres/Result.idr	/^  valueAt : Fin rows -> Vect cols (Lazy (Maybe String))$/;"	d
valueAt	Postgres/Result.idr	/^  valueAt : Fin rows -> Vect cols (Lazy String)$/;"	d
withConn	Postgres/DB.idr	/^withConn : HasIO io => (pgUrl: String) -> (onOpen: Conn -> io b) -> (onError: ConnectionStatus -> io b) -> io b$/;"	d
withDB	Postgres/DB.idr	/^withDB : HasIO io => (url : String) -> Database a Open (const Open) -> io $ Either String a$/;"	d
withExecResult	Postgres/Exec.idr	/^withExecResult : Conn -> (command : String) -> (f : Result -> IO b) -> IO b$/;"	d
withResult	Postgres/Result.idr	/^withResult : ResultProducer source a => source -> a -> (Result -> IO b) -> IO b$/;"	d
||	Postgres/LoadTypes.idr	/^    ||| First element of tuple is true if the type$/;"	c
||	Postgres/LoadTypes.idr	/^    ||| a leading underscore).$/;"	c
||	Postgres/LoadTypes.idr	/^    ||| are named the same as non-array types but with$/;"	c
||	Postgres/LoadTypes.idr	/^    ||| is an array. Second element of tuple is the$/;"	c
||	Postgres/LoadTypes.idr	/^    ||| name of the non-array type (because array types$/;"	c
